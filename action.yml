name: "Submodules Alternative"
description: "Adds/updates all repositories added by using the Submodules Alternative tool."
author: "Panquesito7"
branding:
  icon: git-pull-request
  color: purple
inputs:
  repos_filename:
    description: "The filename used to obtain the configuration and necessary repository data."
    required: true
    default: "repos"
  use_pr:
    description: "Whether to add/update repositories via a PR or direct push."
    required: true
    default: "true"
  branch_name:
    description: "The name of the branch to push to (only if `use_pr` is enabled). Not applicable when multiple PRs are created!"
    required: false
    default: "repo-update"
  commit_message:
    description: "The commit/PR message to use when adding new subtrees."
    required: false
    default: 'Add the given subtrees'
  commit_message_update:
    description: "The commit/PR message to use when updating all the subtrees. Not applicable when multiple PRs are created!"
    required: false
    default: 'Bump subtrees to their latest version'
  add_repos:
    description: "Runs the `fetch-repos` script if enabled to clone all the subtrees."
    required: true
    default: "false"
  update_repos:
    description: "Whether to update the subtrees or not."
    required: true
    default: "true"
  squash_commits:
    description: "Whether to squash all commits into one or not."
    required: false
    default: "false"
  one_pr:
    description: "Creates one single PR for updating all the subtrees. This does not apply to the `fetch-repos` script. Doesn't work together with `squash_commits`."
    required: false
    default: "false"
runs:
  using: "composite"
  steps:
    - name: Make sure the configurations are valid
      shell: bash
      run: |
        repos_filename="$repos_filename"

        if [[ ${{ inputs.add_repos }} == false ]] && [[ ${{ inputs.update_repos }} == false ]]; then
          echo "Both 'add_repos' and 'update_repos' are disabled. Please enable at least one of them."
          exit 1
        fi

        if [[ ${{ inputs.squash_commits }} == true ]] && [[ ${{ inputs.one_pr }} == false ]]; then
          echo "The 'one_pr' option doesn't work together with 'squash_commits' enabled. Please adjust accordingly."
          exit 1
        fi

        if [[ "$repos_filename" == *.lua ]]; then
          echo "Warning: 'repos_filename' contains '.lua' at the end. It is recommended to remove it."
          repos_filename=$(echo "$repos_filename" | sed 's/\.lua//g')
        fi

        echo "repos_filename=$repos_filename" >> $GITHUB_ENV
    - name: Setup Git configurations
      shell: bash
      run: |
        git config --global user.name github-actions[bot]
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
    - name: Change to the correct branch
      shell: bash
      run: |
        if git ls-remote --heads origin ${{ inputs.branch_name }} | grep -q ${{ inputs.branch_name }}; then
          git checkout ${{ inputs.branch_name }}
        else
          git checkout -b ${{ inputs.branch_name }}
        fi
    - name: Update the repositories file
      shell: bash
      run: |
        if [[ $(git diff --name-only origin/${GITHUB_REF##*/} $repos_filename.lua) ]]; then
          git rm $repos_filename.lua || true

          default_branch=$(git remote show origin | grep 'HEAD branch' | cut -d' ' -f5)
          wget https://raw.githubusercontent.com/${{ github.repository }}/${default_branch}/$repos_filename.lua
        fi
    - name: Setup Lua
      shell: bash
      run: |
        sudo apt-get -qq update
        sudo apt-get -qq install lua5.3
    - name: Run fetch-repos script
      shell: bash
      run: |
        if [[ ${{ inputs.add_repos }} == true ]]; then
          lua ${{ github.action_path }}/src/fetch-repos.lua '$repos_filename' ${{ inputs.squash_commits }} '${{ inputs.commit_message }}'
        fi
    - name: Run update-repos script
      shell: bash
      run: |
        if [[ ${{ inputs.update_repos }} == true ]]; then
          lua ${{ github.action_path }}/src/update-repos.lua '$repos_filename' ${{ inputs.squash_commits }} ${{ inputs.one_pr }} '${{ inputs.commit_message_update }}'
        fi
    - name: Push changes and create PR
      shell: bash
      run: |
        if [[ ${{ inputs.use_pr }} == true ]]; then
          if [[ ${{ inputs.one_pr }} == true ]]; then # One PR for everything: fetching and updating.
            git push origin ${{ inputs.branch_name }}:${{ inputs.branch_name }} || true

            pr_body=$(bash ${{ github.action_path }}/src/tools/markdown_pr_body.sh "all" "false" "${{ github.action_path }}")
            gh pr create --base ${GITHUB_REF##*/} --head ${{ inputs.branch_name }} --title '${{ inputs.commit_message }}' --body "$pr_body" || true
          else # The One PR option is not available when adding the repositories.
               # The code below creates one PR for fetching all the subtrees.
            if [[ ${{ inputs.add_repos }} == true ]]; then
              git checkout ${{ inputs.branch_name }} || true
              git push origin ${{ inputs.branch_name }}:${{ inputs.branch_name }} || true

              # Obtain the PR body and the necessary labels.
              PR_BODY=$(bash ${{ github.action_path }}/src/tools/markdown_pr_body.sh "added" "false" "${{ github.action_path }}")
              LABELS_FETCH=$(bash ${{ github.action_path }}/src/tools/fetch_labels.sh "${{ github.action_path }}" "$repos_filename" "fetch")

              # Create the pull request with the given data.
              gh pr create --base ${GITHUB_REF##*/} --head ${{ inputs.branch_name }} --title '${{ inputs.commit_message }}' --body "Repositories were added or updated using the Submodules Alternative tool." || true

              # Edit the newly created PR by adding the specific labels with the given PR number.
              if [[ $(gh pr list --base ${GITHUB_REF##*/} --head ${{ inputs.branch_name }}) ]]; then
                PR_NUMBER=$(bash ${{ github.action_path }}/src/tools/pr_number.sh ${GITHUB_REF##*/} "${{ inputs.branch_name }}")
                gh pr edit $PR_NUMBER --add-label $LABELS_FETCH || true
              fi
            elif [[ ${{ inputs.update_repos }} == true ]] && [[ ${{ inputs.add_repos }} == false ]]; then
              # The One PR option is available when updating the repositories.

              # Get the branches that will be used to create the PRs.
              BRANCHES=$(lua -e 'local repos = require("$repos_filename").repos; dofile("${{ github.action_path }}/src/helper-functions.lua"); get_repo_branches(repos)')
              LABELS_UPDATE=$(bash ${{ github.action_path }}/src/tools/fetch_labels.sh "${{ github.action_path }}" "$repos_filename" "update")

              for branch in ${BRANCHES[@]}; do
                # Obtain the PR body and adjust it to the updated subtree.
                REPO_NAME=${branch%-update}
                PR_BODY=$(bash ${{ github.action_path }}/src/tools/markdown_pr_body.sh "updated" "true" "${{ github.action_path }}" "$repo_name")

                # Create the PR with the given data.
                gh pr create --base ${GITHUB_REF##*/} --head $branch --title 'Bump `'$repo_name'` to its latest commit' --body "$PR_BODY" || true

                # Edit the newly created PR by adding the specific labels.
                if [[ $(gh pr list --base ${GITHUB_REF##*/} --head $branch) ]]; then
                  PR_NUMBER=$(bash ${{ github.action_path }}/src/tools/pr_number.sh ${GITHUB_REF##*/} "$branch")
                  gh pr edit $PR_NUMBER --add-label "$LABELS_UPDATE" || true
                fi
              done
            fi
          fi
        else
          git push || true
        fi
      env:
        GH_TOKEN: ${{ github.token }}
    - name: Delete temporary files
      shell: bash
      run: |
        rm updated_subtrees.txt added_subtrees.txt || true
