name: "Submodules Alternative"
description: "Adds/updates all repositories added by using the Submodules Alternative tool."
author: "Panquesito7"
branding:
  icon: git-pull-request
  color: purple
inputs:
  repos_filename:
    description: "The filename used to obtain the repository data (no file format is required)."
    required: true
    default: "repos"
  use_pr:
    description: "Whether to add/update repositories via a PR or direct push."
    required: true
    default: "true"
  branch_name:
    description: "The name of the branch to push to (only if `use_pr` is enabled)."
    required: false
    default: "repo-update"
  commit_message:
    description: "The commit/PR message to use when adding new repositories."
    required: false
    default: 'Add the given repositories'
  commit_message_update:
    description: "The commit/PR message to use when updating all the repositories."
    required: false
    default: 'Bump repositories to their latest version'
  add_repos:
    description: "Runs the `fetch-repos` script if enabled to clone all the repositories."
    required: true
    default: "false"
  update_repos:
    description: "Whether to update the repositories or not."
    required: true
    default: "true"
  squash_commits:
    description: "Whether to squash all commits into one or not."
    required: false
    default: "false"
  one_pr:
    description: "Creates one single PR for updating all the repositories. This does not apply to the `fetch-repos` script. Doesn't work with `squash_commits`."
    required: false
    default: "false"
  delete_existing_branches:
    description: "Deletes the branches that updated the subtrees. Note that this is done only on action run, not on immediate PR merge."
    required: false
    default: "true"
runs:
  using: "composite"
  steps:
    - name: Make sure the configuration is valid
      shell: bash
      run: |
        if [[ ${{ inputs.add_repos }} == false ]] && [[ ${{ inputs.update_repos }} == false ]]; then
          echo "Both 'add_repos' and 'update_repos' are disabled. Please enable at least one of them."
          exit 1
        fi

        if [[ ${{ inputs.squash_commits }} == true ]] && [[ ${{ inputs.one_pr }} == false ]]; then
          echo "The 'one_pr' option doesn't work together with 'squash_commits' enabled. Please adjust accordingly."
          exit 1
        fi
    - name: Setup Git configurations
      shell: bash
      run: |
        git config --global user.name github-actions[bot]
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
    - name: Change to the correct branch
      shell: bash
      run: |
        if git ls-remote --heads origin ${{ inputs.branch_name }} | grep -q ${{ inputs.branch_name }}; then
          git checkout ${{ inputs.branch_name }}
        else
          git checkout -b ${{ inputs.branch_name }}
        fi
    - name: Update the repositories file
      shell: bash
      run: |
        if [[ $(git diff --name-only origin/${GITHUB_REF##*/} ${{ inputs.repos_filename }}.lua) ]]; then
          git rm ${{ inputs.repos_filename }}.lua || true

          default_branch=$(git remote show origin | grep 'HEAD branch' | cut -d' ' -f5)
          wget https://raw.githubusercontent.com/${{ github.repository }}/${default_branch}/${{ inputs.repos_filename }}.lua

          if [[ $(git diff --name-only) ]]; then
            git add ${{ inputs.repos_filename }}.lua
            git commit -m 'Update repositories file'
          fi
        fi
    - name: Setup Lua
      shell: bash
      run: |
        sudo apt-get -qq update
        sudo apt-get -qq install lua5.3
    - name: Delete existing branches
      shell: bash
      run: |
        if [[ ${{ inputs.update_repos }} == true ]] && [[ ${{ inputs.delete_existing_branches }} == true ]]; then
          branches=$(lua -e 'local repos = require("${{ inputs.repos_filename }}").repos; dofile("${{ github.action_path }}/helper-functions.lua"); get_repo_branches(repos)')
          for branch in ${branches[@]}; do
            if git ls-remote --heads origin $branch | grep -q $branch; then
              if git diff --name-only origin/${GITHUB_REF##*/} $branch | grep -q $branch; then
                git push origin -d $branch
              fi
            fi
          done

          if git ls-remote --heads origin ${{ inputs.branch_name }} | grep -q ${{ inputs.branch_name }}; then
            if git diff --name-only origin/${GITHUB_REF##*/} ${{ inputs.branch_name }} | grep -q ${{ inputs.branch_name }}; then
              git push origin -d ${{ inputs.branch_name }}
            fi
          fi
        fi
    - name: Run fetch-repos script
      shell: bash
      run: |
        if [[ ${{ inputs.add_repos }} == true ]]; then
          lua ${{ github.action_path }}/fetch-repos.lua ${{ inputs.repos_filename }} ${{ inputs.squash_commits }} '${{ inputs.commit_message }}'
        fi
    - name: Run update-repos script
      shell: bash
      run: |
        if [[ ${{ inputs.update_repos }} == true ]]; then
          lua ${{ github.action_path }}/update-repos.lua ${{ inputs.repos_filename }} ${{ inputs.squash_commits }} ${{ inputs.one_pr }} '${{ inputs.commit_message_update }}'
        fi
    - name: Push changes and create PR
      shell: bash
      run: |
        if [[ ${{ inputs.use_pr }} == true ]]; then
          if [[ ${{ inputs.one_pr }} == true ]]; then
            git push origin ${{ inputs.branch_name }}:${{ inputs.branch_name }} || true
            gh pr create --base ${GITHUB_REF##*/} --head ${{ inputs.branch_name }} --title '${{ inputs.commit_message }}' --body "$(lua -e 'local config = require("${{ inputs.repos_filename }}").config; if config.both then print(config.both) else print("Repositories were added or updated using the Submodules Alternative tool.") end')" || true
          else
            # The One PR option is not available when adding the repositories.
            if [[ ${{ inputs.add_repos }} == true ]]; then
              git checkout ${{ inputs.branch_name }} || true
              git push origin ${{ inputs.branch_name }}:${{ inputs.branch_name }} || true

              pr=$(gh pr list --base ${GITHUB_REF##*/} --head $branch)
              pr_number=$(echo $pr | cut -d ' ' -f 1)

              labels_fetch=$(lua -e 'local labels = require("${{ inputs.repos_filename }}").config; if labels.labels_fetch then print(labels.labels_fetch) end') || "repo-fetch,dependencies"
              gh pr create --base ${GITHUB_REF##*/} --head ${{ inputs.branch_name }} --title '${{ inputs.commit_message }}' --body "$(lua -e 'local config = require("${{ inputs.repos_filename }}").config; if config.fetch then print(config.fetch) else print("Repositories were added or updated using the Submodules Alternative tool.") end')" || true

              if [[ $(gh pr list --base ${GITHUB_REF##*/} --head ${{ inputs.branch_name }}) ]]; then
                gh pr edit $pr_number --add-label $labels_fetch || true
              fi
            else # The `add_repos` option is disabled.
              branches=$(lua -e 'local repos = require("${{ inputs.repos_filename }}").repos; dofile("${{ github.action_path }}/helper-functions.lua"); get_repo_branches(repos)')
              labels_update=$(lua -e 'local labels = require("${{ inputs.repos_filename }}").config; if labels.labels_update then print(labels.labels_update) end') || "dependencies"

              for branch in ${branches[@]}; do
                repo_name=${branch%-update}
                gh pr create --base ${GITHUB_REF##*/} --head $branch --title 'Bump `'$repo_name'` to its latest commit' --body "$(lua -e 'local config = require("${{ inputs.repos_filename }}").config; if config.update then print(config.update) else print('The subtree `'$repo_name'` to its latest commit') end')

                if [[ $(gh pr list --base ${GITHUB_REF##*/} --head $branch) ]]; then
                  pr=$(gh pr list --base ${GITHUB_REF##*/} --head $branch)
                  pr_number=$(echo $pr | cut -d ' ' -f 1)

                  gh pr edit $pr_number --add-label "$labels_update" || true
                fi
              done
            fi
          fi
        else
          git push || true
        fi
      env:
        GH_TOKEN: ${{ github.token }}
